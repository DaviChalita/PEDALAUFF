/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 6.0, "minX": 0.0, "maxY": 3028.0, "series": [{"data": [[0.0, 6.0], [0.1, 10.0], [0.2, 10.0], [0.3, 10.0], [0.4, 11.0], [0.5, 12.0], [0.6, 12.0], [0.7, 12.0], [0.8, 13.0], [0.9, 13.0], [1.0, 13.0], [1.1, 13.0], [1.2, 14.0], [1.3, 14.0], [1.4, 14.0], [1.5, 14.0], [1.6, 14.0], [1.7, 14.0], [1.8, 14.0], [1.9, 14.0], [2.0, 15.0], [2.1, 15.0], [2.2, 15.0], [2.3, 15.0], [2.4, 15.0], [2.5, 16.0], [2.6, 17.0], [2.7, 17.0], [2.8, 17.0], [2.9, 17.0], [3.0, 18.0], [3.1, 18.0], [3.2, 18.0], [3.3, 18.0], [3.4, 19.0], [3.5, 19.0], [3.6, 20.0], [3.7, 20.0], [3.8, 20.0], [3.9, 21.0], [4.0, 21.0], [4.1, 22.0], [4.2, 22.0], [4.3, 22.0], [4.4, 22.0], [4.5, 23.0], [4.6, 23.0], [4.7, 24.0], [4.8, 24.0], [4.9, 25.0], [5.0, 25.0], [5.1, 26.0], [5.2, 27.0], [5.3, 28.0], [5.4, 29.0], [5.5, 30.0], [5.6, 32.0], [5.7, 34.0], [5.8, 35.0], [5.9, 36.0], [6.0, 38.0], [6.1, 38.0], [6.2, 40.0], [6.3, 40.0], [6.4, 41.0], [6.5, 43.0], [6.6, 44.0], [6.7, 45.0], [6.8, 46.0], [6.9, 46.0], [7.0, 50.0], [7.1, 52.0], [7.2, 52.0], [7.3, 54.0], [7.4, 56.0], [7.5, 58.0], [7.6, 59.0], [7.7, 61.0], [7.8, 63.0], [7.9, 65.0], [8.0, 65.0], [8.1, 71.0], [8.2, 78.0], [8.3, 82.0], [8.4, 85.0], [8.5, 86.0], [8.6, 89.0], [8.7, 95.0], [8.8, 99.0], [8.9, 103.0], [9.0, 115.0], [9.1, 118.0], [9.2, 119.0], [9.3, 120.0], [9.4, 122.0], [9.5, 123.0], [9.6, 125.0], [9.7, 125.0], [9.8, 126.0], [9.9, 128.0], [10.0, 131.0], [10.1, 131.0], [10.2, 133.0], [10.3, 133.0], [10.4, 136.0], [10.5, 136.0], [10.6, 139.0], [10.7, 140.0], [10.8, 143.0], [10.9, 146.0], [11.0, 150.0], [11.1, 154.0], [11.2, 163.0], [11.3, 171.0], [11.4, 173.0], [11.5, 178.0], [11.6, 178.0], [11.7, 179.0], [11.8, 182.0], [11.9, 184.0], [12.0, 185.0], [12.1, 186.0], [12.2, 188.0], [12.3, 193.0], [12.4, 195.0], [12.5, 200.0], [12.6, 201.0], [12.7, 205.0], [12.8, 206.0], [12.9, 207.0], [13.0, 208.0], [13.1, 210.0], [13.2, 214.0], [13.3, 214.0], [13.4, 217.0], [13.5, 220.0], [13.6, 222.0], [13.7, 223.0], [13.8, 225.0], [13.9, 226.0], [14.0, 228.0], [14.1, 229.0], [14.2, 230.0], [14.3, 234.0], [14.4, 235.0], [14.5, 235.0], [14.6, 236.0], [14.7, 241.0], [14.8, 243.0], [14.9, 245.0], [15.0, 245.0], [15.1, 247.0], [15.2, 251.0], [15.3, 252.0], [15.4, 254.0], [15.5, 255.0], [15.6, 257.0], [15.7, 258.0], [15.8, 260.0], [15.9, 260.0], [16.0, 262.0], [16.1, 263.0], [16.2, 265.0], [16.3, 267.0], [16.4, 268.0], [16.5, 269.0], [16.6, 269.0], [16.7, 270.0], [16.8, 271.0], [16.9, 271.0], [17.0, 274.0], [17.1, 274.0], [17.2, 275.0], [17.3, 276.0], [17.4, 277.0], [17.5, 277.0], [17.6, 278.0], [17.7, 279.0], [17.8, 280.0], [17.9, 280.0], [18.0, 282.0], [18.1, 283.0], [18.2, 283.0], [18.3, 284.0], [18.4, 287.0], [18.5, 289.0], [18.6, 290.0], [18.7, 293.0], [18.8, 294.0], [18.9, 297.0], [19.0, 298.0], [19.1, 300.0], [19.2, 300.0], [19.3, 301.0], [19.4, 301.0], [19.5, 303.0], [19.6, 303.0], [19.7, 304.0], [19.8, 306.0], [19.9, 307.0], [20.0, 308.0], [20.1, 309.0], [20.2, 310.0], [20.3, 311.0], [20.4, 313.0], [20.5, 314.0], [20.6, 315.0], [20.7, 316.0], [20.8, 317.0], [20.9, 318.0], [21.0, 318.0], [21.1, 319.0], [21.2, 321.0], [21.3, 322.0], [21.4, 323.0], [21.5, 326.0], [21.6, 327.0], [21.7, 329.0], [21.8, 331.0], [21.9, 332.0], [22.0, 333.0], [22.1, 335.0], [22.2, 336.0], [22.3, 336.0], [22.4, 339.0], [22.5, 343.0], [22.6, 349.0], [22.7, 350.0], [22.8, 355.0], [22.9, 363.0], [23.0, 381.0], [23.1, 387.0], [23.2, 406.0], [23.3, 408.0], [23.4, 409.0], [23.5, 412.0], [23.6, 413.0], [23.7, 413.0], [23.8, 416.0], [23.9, 418.0], [24.0, 420.0], [24.1, 421.0], [24.2, 423.0], [24.3, 425.0], [24.4, 426.0], [24.5, 429.0], [24.6, 431.0], [24.7, 437.0], [24.8, 443.0], [24.9, 444.0], [25.0, 446.0], [25.1, 448.0], [25.2, 450.0], [25.3, 451.0], [25.4, 453.0], [25.5, 455.0], [25.6, 457.0], [25.7, 457.0], [25.8, 461.0], [25.9, 463.0], [26.0, 465.0], [26.1, 467.0], [26.2, 468.0], [26.3, 469.0], [26.4, 472.0], [26.5, 473.0], [26.6, 474.0], [26.7, 475.0], [26.8, 476.0], [26.9, 477.0], [27.0, 477.0], [27.1, 477.0], [27.2, 479.0], [27.3, 479.0], [27.4, 480.0], [27.5, 481.0], [27.6, 483.0], [27.7, 483.0], [27.8, 484.0], [27.9, 484.0], [28.0, 485.0], [28.1, 487.0], [28.2, 488.0], [28.3, 489.0], [28.4, 491.0], [28.5, 491.0], [28.6, 492.0], [28.7, 492.0], [28.8, 494.0], [28.9, 494.0], [29.0, 494.0], [29.1, 495.0], [29.2, 496.0], [29.3, 497.0], [29.4, 497.0], [29.5, 498.0], [29.6, 498.0], [29.7, 500.0], [29.8, 500.0], [29.9, 501.0], [30.0, 502.0], [30.1, 503.0], [30.2, 503.0], [30.3, 504.0], [30.4, 505.0], [30.5, 505.0], [30.6, 506.0], [30.7, 506.0], [30.8, 506.0], [30.9, 507.0], [31.0, 507.0], [31.1, 508.0], [31.2, 508.0], [31.3, 509.0], [31.4, 510.0], [31.5, 510.0], [31.6, 510.0], [31.7, 511.0], [31.8, 511.0], [31.9, 513.0], [32.0, 515.0], [32.1, 515.0], [32.2, 516.0], [32.3, 517.0], [32.4, 518.0], [32.5, 518.0], [32.6, 519.0], [32.7, 520.0], [32.8, 522.0], [32.9, 524.0], [33.0, 524.0], [33.1, 525.0], [33.2, 526.0], [33.3, 528.0], [33.4, 528.0], [33.5, 530.0], [33.6, 530.0], [33.7, 532.0], [33.8, 534.0], [33.9, 534.0], [34.0, 536.0], [34.1, 537.0], [34.2, 539.0], [34.3, 539.0], [34.4, 541.0], [34.5, 542.0], [34.6, 542.0], [34.7, 543.0], [34.8, 544.0], [34.9, 545.0], [35.0, 546.0], [35.1, 547.0], [35.2, 547.0], [35.3, 548.0], [35.4, 549.0], [35.5, 550.0], [35.6, 550.0], [35.7, 551.0], [35.8, 551.0], [35.9, 551.0], [36.0, 552.0], [36.1, 553.0], [36.2, 553.0], [36.3, 554.0], [36.4, 555.0], [36.5, 555.0], [36.6, 555.0], [36.7, 556.0], [36.8, 556.0], [36.9, 557.0], [37.0, 558.0], [37.1, 558.0], [37.2, 559.0], [37.3, 559.0], [37.4, 560.0], [37.5, 562.0], [37.6, 563.0], [37.7, 564.0], [37.8, 565.0], [37.9, 566.0], [38.0, 566.0], [38.1, 567.0], [38.2, 569.0], [38.3, 571.0], [38.4, 572.0], [38.5, 572.0], [38.6, 574.0], [38.7, 577.0], [38.8, 578.0], [38.9, 578.0], [39.0, 580.0], [39.1, 583.0], [39.2, 583.0], [39.3, 584.0], [39.4, 585.0], [39.5, 585.0], [39.6, 587.0], [39.7, 591.0], [39.8, 595.0], [39.9, 598.0], [40.0, 604.0], [40.1, 606.0], [40.2, 609.0], [40.3, 609.0], [40.4, 609.0], [40.5, 611.0], [40.6, 611.0], [40.7, 613.0], [40.8, 615.0], [40.9, 616.0], [41.0, 618.0], [41.1, 619.0], [41.2, 622.0], [41.3, 623.0], [41.4, 625.0], [41.5, 627.0], [41.6, 627.0], [41.7, 629.0], [41.8, 632.0], [41.9, 634.0], [42.0, 636.0], [42.1, 637.0], [42.2, 637.0], [42.3, 639.0], [42.4, 641.0], [42.5, 642.0], [42.6, 643.0], [42.7, 643.0], [42.8, 644.0], [42.9, 646.0], [43.0, 646.0], [43.1, 647.0], [43.2, 647.0], [43.3, 649.0], [43.4, 650.0], [43.5, 653.0], [43.6, 654.0], [43.7, 655.0], [43.8, 656.0], [43.9, 656.0], [44.0, 657.0], [44.1, 658.0], [44.2, 658.0], [44.3, 658.0], [44.4, 659.0], [44.5, 660.0], [44.6, 660.0], [44.7, 662.0], [44.8, 663.0], [44.9, 664.0], [45.0, 666.0], [45.1, 667.0], [45.2, 667.0], [45.3, 669.0], [45.4, 670.0], [45.5, 670.0], [45.6, 671.0], [45.7, 672.0], [45.8, 673.0], [45.9, 673.0], [46.0, 673.0], [46.1, 674.0], [46.2, 675.0], [46.3, 676.0], [46.4, 676.0], [46.5, 676.0], [46.6, 677.0], [46.7, 677.0], [46.8, 677.0], [46.9, 677.0], [47.0, 678.0], [47.1, 678.0], [47.2, 679.0], [47.3, 680.0], [47.4, 680.0], [47.5, 680.0], [47.6, 681.0], [47.7, 682.0], [47.8, 682.0], [47.9, 682.0], [48.0, 683.0], [48.1, 683.0], [48.2, 684.0], [48.3, 684.0], [48.4, 685.0], [48.5, 685.0], [48.6, 686.0], [48.7, 686.0], [48.8, 686.0], [48.9, 690.0], [49.0, 690.0], [49.1, 692.0], [49.2, 694.0], [49.3, 695.0], [49.4, 696.0], [49.5, 697.0], [49.6, 698.0], [49.7, 698.0], [49.8, 699.0], [49.9, 700.0], [50.0, 700.0], [50.1, 701.0], [50.2, 702.0], [50.3, 702.0], [50.4, 704.0], [50.5, 705.0], [50.6, 705.0], [50.7, 706.0], [50.8, 707.0], [50.9, 707.0], [51.0, 708.0], [51.1, 709.0], [51.2, 711.0], [51.3, 712.0], [51.4, 717.0], [51.5, 717.0], [51.6, 718.0], [51.7, 720.0], [51.8, 721.0], [51.9, 721.0], [52.0, 721.0], [52.1, 722.0], [52.2, 723.0], [52.3, 723.0], [52.4, 724.0], [52.5, 724.0], [52.6, 725.0], [52.7, 725.0], [52.8, 725.0], [52.9, 726.0], [53.0, 726.0], [53.1, 726.0], [53.2, 727.0], [53.3, 728.0], [53.4, 728.0], [53.5, 729.0], [53.6, 730.0], [53.7, 730.0], [53.8, 731.0], [53.9, 733.0], [54.0, 733.0], [54.1, 734.0], [54.2, 735.0], [54.3, 736.0], [54.4, 738.0], [54.5, 739.0], [54.6, 739.0], [54.7, 740.0], [54.8, 740.0], [54.9, 741.0], [55.0, 741.0], [55.1, 742.0], [55.2, 742.0], [55.3, 744.0], [55.4, 744.0], [55.5, 744.0], [55.6, 745.0], [55.7, 745.0], [55.8, 746.0], [55.9, 747.0], [56.0, 747.0], [56.1, 747.0], [56.2, 748.0], [56.3, 748.0], [56.4, 749.0], [56.5, 750.0], [56.6, 750.0], [56.7, 751.0], [56.8, 752.0], [56.9, 753.0], [57.0, 755.0], [57.1, 757.0], [57.2, 758.0], [57.3, 758.0], [57.4, 760.0], [57.5, 761.0], [57.6, 761.0], [57.7, 761.0], [57.8, 762.0], [57.9, 762.0], [58.0, 763.0], [58.1, 763.0], [58.2, 764.0], [58.3, 764.0], [58.4, 764.0], [58.5, 765.0], [58.6, 765.0], [58.7, 766.0], [58.8, 766.0], [58.9, 767.0], [59.0, 767.0], [59.1, 767.0], [59.2, 768.0], [59.3, 768.0], [59.4, 769.0], [59.5, 770.0], [59.6, 770.0], [59.7, 771.0], [59.8, 772.0], [59.9, 774.0], [60.0, 774.0], [60.1, 774.0], [60.2, 776.0], [60.3, 779.0], [60.4, 779.0], [60.5, 781.0], [60.6, 781.0], [60.7, 782.0], [60.8, 783.0], [60.9, 784.0], [61.0, 785.0], [61.1, 786.0], [61.2, 788.0], [61.3, 788.0], [61.4, 789.0], [61.5, 790.0], [61.6, 791.0], [61.7, 791.0], [61.8, 792.0], [61.9, 792.0], [62.0, 793.0], [62.1, 794.0], [62.2, 795.0], [62.3, 795.0], [62.4, 796.0], [62.5, 797.0], [62.6, 797.0], [62.7, 798.0], [62.8, 799.0], [62.9, 799.0], [63.0, 799.0], [63.1, 800.0], [63.2, 801.0], [63.3, 802.0], [63.4, 802.0], [63.5, 802.0], [63.6, 803.0], [63.7, 804.0], [63.8, 807.0], [63.9, 808.0], [64.0, 809.0], [64.1, 809.0], [64.2, 810.0], [64.3, 812.0], [64.4, 814.0], [64.5, 815.0], [64.6, 816.0], [64.7, 817.0], [64.8, 817.0], [64.9, 818.0], [65.0, 818.0], [65.1, 819.0], [65.2, 819.0], [65.3, 820.0], [65.4, 820.0], [65.5, 821.0], [65.6, 821.0], [65.7, 822.0], [65.8, 822.0], [65.9, 822.0], [66.0, 822.0], [66.1, 823.0], [66.2, 823.0], [66.3, 823.0], [66.4, 824.0], [66.5, 824.0], [66.6, 825.0], [66.7, 825.0], [66.8, 825.0], [66.9, 825.0], [67.0, 825.0], [67.1, 826.0], [67.2, 826.0], [67.3, 827.0], [67.4, 827.0], [67.5, 828.0], [67.6, 828.0], [67.7, 829.0], [67.8, 829.0], [67.9, 830.0], [68.0, 831.0], [68.1, 832.0], [68.2, 833.0], [68.3, 834.0], [68.4, 835.0], [68.5, 836.0], [68.6, 837.0], [68.7, 838.0], [68.8, 838.0], [68.9, 838.0], [69.0, 839.0], [69.1, 840.0], [69.2, 843.0], [69.3, 844.0], [69.4, 846.0], [69.5, 846.0], [69.6, 847.0], [69.7, 848.0], [69.8, 849.0], [69.9, 852.0], [70.0, 855.0], [70.1, 858.0], [70.2, 860.0], [70.3, 862.0], [70.4, 862.0], [70.5, 864.0], [70.6, 871.0], [70.7, 871.0], [70.8, 875.0], [70.9, 876.0], [71.0, 877.0], [71.1, 885.0], [71.2, 887.0], [71.3, 895.0], [71.4, 898.0], [71.5, 900.0], [71.6, 909.0], [71.7, 916.0], [71.8, 919.0], [71.9, 920.0], [72.0, 932.0], [72.1, 936.0], [72.2, 940.0], [72.3, 945.0], [72.4, 950.0], [72.5, 955.0], [72.6, 960.0], [72.7, 961.0], [72.8, 962.0], [72.9, 966.0], [73.0, 979.0], [73.1, 999.0], [73.2, 1002.0], [73.3, 1011.0], [73.4, 1023.0], [73.5, 1035.0], [73.6, 1047.0], [73.7, 1049.0], [73.8, 1053.0], [73.9, 1056.0], [74.0, 1058.0], [74.1, 1069.0], [74.2, 1072.0], [74.3, 1075.0], [74.4, 1076.0], [74.5, 1077.0], [74.6, 1082.0], [74.7, 1084.0], [74.8, 1096.0], [74.9, 1099.0], [75.0, 1103.0], [75.1, 1107.0], [75.2, 1114.0], [75.3, 1116.0], [75.4, 1121.0], [75.5, 1130.0], [75.6, 1135.0], [75.7, 1136.0], [75.8, 1137.0], [75.9, 1139.0], [76.0, 1146.0], [76.1, 1147.0], [76.2, 1147.0], [76.3, 1150.0], [76.4, 1153.0], [76.5, 1158.0], [76.6, 1161.0], [76.7, 1162.0], [76.8, 1167.0], [76.9, 1170.0], [77.0, 1172.0], [77.1, 1176.0], [77.2, 1177.0], [77.3, 1181.0], [77.4, 1182.0], [77.5, 1186.0], [77.6, 1187.0], [77.7, 1192.0], [77.8, 1193.0], [77.9, 1196.0], [78.0, 1200.0], [78.1, 1204.0], [78.2, 1205.0], [78.3, 1207.0], [78.4, 1210.0], [78.5, 1216.0], [78.6, 1217.0], [78.7, 1221.0], [78.8, 1224.0], [78.9, 1228.0], [79.0, 1232.0], [79.1, 1235.0], [79.2, 1237.0], [79.3, 1243.0], [79.4, 1245.0], [79.5, 1249.0], [79.6, 1250.0], [79.7, 1252.0], [79.8, 1255.0], [79.9, 1264.0], [80.0, 1265.0], [80.1, 1267.0], [80.2, 1270.0], [80.3, 1276.0], [80.4, 1278.0], [80.5, 1279.0], [80.6, 1279.0], [80.7, 1280.0], [80.8, 1285.0], [80.9, 1287.0], [81.0, 1288.0], [81.1, 1292.0], [81.2, 1294.0], [81.3, 1295.0], [81.4, 1295.0], [81.5, 1300.0], [81.6, 1310.0], [81.7, 1311.0], [81.8, 1314.0], [81.9, 1321.0], [82.0, 1323.0], [82.1, 1325.0], [82.2, 1328.0], [82.3, 1340.0], [82.4, 1342.0], [82.5, 1344.0], [82.6, 1345.0], [82.7, 1346.0], [82.8, 1348.0], [82.9, 1356.0], [83.0, 1370.0], [83.1, 1373.0], [83.2, 1375.0], [83.3, 1378.0], [83.4, 1378.0], [83.5, 1382.0], [83.6, 1383.0], [83.7, 1384.0], [83.8, 1386.0], [83.9, 1389.0], [84.0, 1391.0], [84.1, 1392.0], [84.2, 1393.0], [84.3, 1399.0], [84.4, 1407.0], [84.5, 1410.0], [84.6, 1411.0], [84.7, 1411.0], [84.8, 1412.0], [84.9, 1414.0], [85.0, 1417.0], [85.1, 1418.0], [85.2, 1420.0], [85.3, 1421.0], [85.4, 1430.0], [85.5, 1441.0], [85.6, 1460.0], [85.7, 1465.0], [85.8, 1471.0], [85.9, 1475.0], [86.0, 1479.0], [86.1, 1489.0], [86.2, 1495.0], [86.3, 1513.0], [86.4, 1520.0], [86.5, 1526.0], [86.6, 1540.0], [86.7, 1548.0], [86.8, 1561.0], [86.9, 1575.0], [87.0, 1577.0], [87.1, 1581.0], [87.2, 1583.0], [87.3, 1587.0], [87.4, 1589.0], [87.5, 1593.0], [87.6, 1596.0], [87.7, 1603.0], [87.8, 1606.0], [87.9, 1607.0], [88.0, 1608.0], [88.1, 1611.0], [88.2, 1614.0], [88.3, 1616.0], [88.4, 1620.0], [88.5, 1638.0], [88.6, 1643.0], [88.7, 1650.0], [88.8, 1658.0], [88.9, 1659.0], [89.0, 1662.0], [89.1, 1663.0], [89.2, 1670.0], [89.3, 1678.0], [89.4, 1685.0], [89.5, 1692.0], [89.6, 1710.0], [89.7, 1716.0], [89.8, 1734.0], [89.9, 1739.0], [90.0, 1742.0], [90.1, 1743.0], [90.2, 1754.0], [90.3, 1761.0], [90.4, 1764.0], [90.5, 1767.0], [90.6, 1769.0], [90.7, 1770.0], [90.8, 1775.0], [90.9, 1779.0], [91.0, 1783.0], [91.1, 1784.0], [91.2, 1786.0], [91.3, 1790.0], [91.4, 1793.0], [91.5, 1795.0], [91.6, 1800.0], [91.7, 1800.0], [91.8, 1801.0], [91.9, 1811.0], [92.0, 1818.0], [92.1, 1825.0], [92.2, 1836.0], [92.3, 1839.0], [92.4, 1844.0], [92.5, 1868.0], [92.6, 1870.0], [92.7, 1876.0], [92.8, 1878.0], [92.9, 1888.0], [93.0, 1889.0], [93.1, 1902.0], [93.2, 1906.0], [93.3, 1915.0], [93.4, 1919.0], [93.5, 1926.0], [93.6, 1943.0], [93.7, 1954.0], [93.8, 1963.0], [93.9, 1974.0], [94.0, 1979.0], [94.1, 1981.0], [94.2, 1991.0], [94.3, 1993.0], [94.4, 1999.0], [94.5, 2010.0], [94.6, 2014.0], [94.7, 2023.0], [94.8, 2032.0], [94.9, 2034.0], [95.0, 2035.0], [95.1, 2041.0], [95.2, 2047.0], [95.3, 2050.0], [95.4, 2061.0], [95.5, 2084.0], [95.6, 2094.0], [95.7, 2102.0], [95.8, 2116.0], [95.9, 2131.0], [96.0, 2135.0], [96.1, 2143.0], [96.2, 2149.0], [96.3, 2164.0], [96.4, 2171.0], [96.5, 2186.0], [96.6, 2189.0], [96.7, 2209.0], [96.8, 2239.0], [96.9, 2259.0], [97.0, 2281.0], [97.1, 2315.0], [97.2, 2329.0], [97.3, 2339.0], [97.4, 2372.0], [97.5, 2392.0], [97.6, 2396.0], [97.7, 2396.0], [97.8, 2404.0], [97.9, 2408.0], [98.0, 2415.0], [98.1, 2422.0], [98.2, 2465.0], [98.3, 2471.0], [98.4, 2473.0], [98.5, 2483.0], [98.6, 2507.0], [98.7, 2554.0], [98.8, 2590.0], [98.9, 2601.0], [99.0, 2606.0], [99.1, 2614.0], [99.2, 2635.0], [99.3, 2645.0], [99.4, 2649.0], [99.5, 2683.0], [99.6, 2720.0], [99.7, 2743.0], [99.8, 2759.0], [99.9, 2971.0]], "isOverall": false, "label": "Requisição HTTP", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 265.0, "series": [{"data": [[0.0, 176.0], [600.0, 199.0], [700.0, 265.0], [800.0, 168.0], [900.0, 33.0], [1000.0, 36.0], [1100.0, 61.0], [1200.0, 70.0], [1300.0, 57.0], [1400.0, 38.0], [1500.0, 28.0], [100.0, 72.0], [1600.0, 38.0], [1700.0, 41.0], [1800.0, 30.0], [1900.0, 27.0], [2000.0, 25.0], [2100.0, 19.0], [2200.0, 8.0], [2300.0, 14.0], [2400.0, 17.0], [2500.0, 6.0], [2600.0, 14.0], [2700.0, 5.0], [2800.0, 1.0], [2900.0, 1.0], [3000.0, 1.0], [200.0, 133.0], [300.0, 81.0], [400.0, 131.0], [500.0, 205.0]], "isOverall": false, "label": "Requisição HTTP", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 3000.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 275.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1.500ms"], [2, "Requests having \nresponse time > 1.500ms"], [3, "Requests in error"]], "maxY": 1129.0, "series": [{"data": [[0.0, 596.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 1129.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1.500ms", "isController": false}, {"data": [[2.0, 275.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1.500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 513.2719999999995, "minX": 1.63191684E12, "maxY": 513.2719999999995, "series": [{"data": [[1.63191684E12, 513.2719999999995]], "isOverall": false, "label": "Grupo de Usuários para login ", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63191684E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 6.0, "minX": 1.0, "maxY": 2684.0, "series": [{"data": [[2.0, 1109.5], [3.0, 9.0], [4.0, 491.0], [6.0, 37.0], [8.0, 743.6666666666667], [9.0, 14.0], [11.0, 800.3333333333333], [12.0, 52.0], [15.0, 72.33333333333333], [16.0, 1991.0], [17.0, 13.0], [18.0, 2507.0], [19.0, 1289.0], [20.0, 1407.0], [21.0, 15.5], [22.0, 415.45454545454544], [23.0, 40.33333333333333], [24.0, 196.33333333333334], [25.0, 1256.0], [26.0, 1067.6], [27.0, 197.08333333333331], [28.0, 914.5], [29.0, 14.0], [30.0, 556.5], [31.0, 2039.5], [33.0, 2482.0], [32.0, 1600.0], [35.0, 1816.5], [34.0, 1099.0], [37.0, 1242.5], [36.0, 16.0], [39.0, 1315.0], [41.0, 19.333333333333332], [40.0, 1131.5], [43.0, 1381.6666666666665], [42.0, 2277.6666666666665], [45.0, 1002.5], [44.0, 1495.0], [47.0, 13.0], [46.0, 2438.5], [48.0, 2280.3333333333335], [51.0, 949.6666666666667], [53.0, 208.0], [52.0, 210.0], [55.0, 830.0], [54.0, 13.0], [56.0, 560.0], [57.0, 1458.0], [59.0, 421.0], [58.0, 1062.0], [61.0, 426.0], [60.0, 2684.0], [63.0, 420.0], [62.0, 15.0], [67.0, 1056.5], [66.0, 1879.0], [65.0, 18.0], [64.0, 13.0], [71.0, 444.0], [70.0, 1523.0], [68.0, 20.0], [72.0, 715.5], [73.0, 913.0], [74.0, 1402.3333333333333], [75.0, 1581.0], [79.0, 1511.0], [78.0, 632.0], [77.0, 1806.75], [76.0, 2123.25], [83.0, 1083.0], [82.0, 2396.0], [81.0, 1100.0], [80.0, 12.0], [84.0, 806.5], [87.0, 1041.5], [86.0, 1529.5], [85.0, 10.0], [91.0, 16.0], [90.0, 22.0], [89.0, 848.0], [88.0, 699.0], [95.0, 419.0], [94.0, 88.33333333333334], [92.0, 833.5], [93.0, 19.0], [96.0, 35.0], [97.0, 1104.8], [99.0, 300.0], [98.0, 1137.8333333333333], [101.0, 263.0], [103.0, 754.5454545454545], [102.0, 358.5], [100.0, 498.5], [104.0, 1220.75], [105.0, 299.25], [106.0, 335.25], [107.0, 271.57142857142856], [110.0, 18.2], [109.0, 56.0], [111.0, 450.5], [108.0, 14.0], [112.0, 18.666666666666668], [114.0, 1187.5], [115.0, 1075.0], [113.0, 15.0], [117.0, 1582.625], [116.0, 18.5], [119.0, 1654.6666666666665], [118.0, 1834.5], [121.0, 1308.6], [123.0, 1307.0], [122.0, 10.0], [127.0, 1684.5], [126.0, 1817.0], [125.0, 14.0], [124.0, 19.0], [128.0, 674.5], [130.0, 1211.3333333333335], [135.0, 1938.5], [134.0, 1509.5], [132.0, 1084.0], [131.0, 705.0], [129.0, 1322.0], [143.0, 1155.0], [142.0, 1233.0], [140.0, 1825.0], [139.0, 704.0], [138.0, 1000.5], [136.0, 1645.5], [151.0, 1823.0], [150.0, 22.0], [149.0, 1187.0], [148.0, 1310.0], [147.0, 1147.0], [146.0, 1311.0], [145.0, 817.0], [144.0, 1153.0], [159.0, 1163.25], [155.0, 1603.0], [154.0, 1596.0], [153.0, 1591.0], [152.0, 1593.0], [166.0, 99.5], [167.0, 137.0], [165.0, 696.0], [164.0, 13.0], [163.0, 1607.0], [162.0, 1170.0], [161.0, 1490.5], [160.0, 721.0], [173.0, 632.25], [175.0, 14.0], [174.0, 1121.0], [169.0, 1172.0], [179.0, 459.75], [180.0, 689.0], [183.0, 2579.0], [182.0, 911.5], [178.0, 770.0], [177.0, 906.0], [176.0, 1136.0], [185.0, 768.5], [186.0, 647.625], [188.0, 1574.5], [191.0, 1698.0], [190.0, 76.0], [189.0, 1458.0], [187.0, 12.0], [184.0, 799.0], [198.0, 204.9], [197.0, 187.0], [196.0, 135.66666666666666], [193.0, 65.0], [192.0, 2116.0], [200.0, 530.0], [204.0, 456.0], [205.0, 133.6], [206.0, 529.0], [207.0, 1166.0], [203.0, 229.0], [202.0, 1321.0], [201.0, 207.0], [210.0, 525.0], [215.0, 300.0], [214.0, 230.0], [213.0, 311.5], [211.0, 336.0], [209.0, 900.0], [208.0, 214.0], [223.0, 473.0], [222.0, 421.0], [221.0, 409.0], [220.0, 408.0], [219.0, 382.0], [218.0, 355.0], [217.0, 256.5], [225.0, 261.0], [231.0, 413.0], [230.0, 418.0], [229.0, 1426.0], [228.0, 416.0], [227.0, 414.0], [226.0, 412.0], [224.0, 409.0], [239.0, 329.0], [237.0, 443.0], [236.0, 412.0], [234.0, 413.0], [233.0, 1348.0], [232.0, 413.0], [240.0, 133.5], [242.0, 298.5], [246.0, 333.0], [247.0, 453.0], [245.0, 457.0], [244.0, 1294.0], [243.0, 457.0], [241.0, 425.0], [250.0, 472.8], [249.0, 220.0], [251.0, 315.0], [255.0, 472.0], [254.0, 476.0], [253.0, 477.0], [252.0, 1318.5], [269.0, 350.5], [270.0, 534.0], [268.0, 494.0], [259.0, 1449.5], [258.0, 472.0], [257.0, 478.5], [267.0, 494.0], [266.0, 485.0], [265.0, 483.0], [263.0, 481.0], [261.0, 484.0], [260.0, 479.0], [285.0, 499.0], [279.0, 315.5], [286.0, 1002.3333333333334], [284.0, 501.0], [275.0, 497.0], [274.0, 503.0], [273.0, 500.0], [272.0, 502.5], [283.0, 498.0], [282.0, 498.0], [281.0, 483.0], [280.0, 484.0], [278.0, 520.0], [277.0, 494.0], [276.0, 505.0], [301.0, 279.5], [300.0, 506.0], [291.0, 848.0], [290.0, 516.0], [289.0, 537.0], [288.0, 516.0], [299.0, 518.0], [298.0, 494.0], [297.0, 517.0], [296.0, 492.0], [295.0, 506.0], [293.0, 518.0], [292.0, 496.0], [317.0, 617.5], [319.0, 547.0], [313.0, 107.0], [318.0, 667.0], [315.0, 685.0], [314.0, 1194.0], [311.0, 1111.0], [305.0, 491.0], [304.0, 494.6666666666667], [307.0, 484.0], [306.0, 505.0], [310.0, 932.0], [309.0, 515.0], [308.0, 1310.0], [334.0, 587.0], [335.0, 365.5], [333.0, 1411.0], [332.0, 653.0], [330.0, 671.0], [329.0, 525.0], [328.0, 506.0], [327.0, 1393.0], [320.0, 677.0], [322.0, 556.0], [321.0, 611.0], [326.0, 533.0], [325.0, 681.0], [324.0, 792.5], [350.0, 522.0], [351.0, 528.0], [349.0, 502.0], [348.0, 961.0], [347.0, 616.5], [345.0, 481.0], [344.0, 519.0], [343.0, 961.0], [336.0, 940.0], [339.0, 492.0], [338.0, 622.5], [342.0, 494.0], [341.0, 644.0], [340.0, 920.0], [365.0, 1175.6666666666667], [356.0, 329.0], [367.0, 896.6666666666666], [363.0, 649.0], [362.0, 485.0], [361.0, 558.5], [359.0, 613.5], [353.0, 489.0], [352.0, 585.0], [357.0, 469.0], [355.0, 566.0], [354.0, 536.0], [383.0, 1183.0], [378.0, 566.5], [382.0, 669.0], [381.0, 2047.0], [380.0, 1172.0], [371.0, 596.0], [369.0, 1170.5], [368.0, 1384.5], [379.0, 1176.0], [377.0, 1158.0], [376.0, 711.0], [375.0, 1639.5], [374.0, 945.0], [373.0, 677.0], [372.0, 736.0], [397.0, 357.66666666666663], [389.0, 643.8], [388.0, 689.0], [390.0, 643.0], [398.0, 533.0], [399.0, 1137.0], [396.0, 1053.5], [387.0, 1155.0], [386.0, 1359.0], [385.0, 622.0], [384.0, 697.0], [394.0, 685.0], [393.0, 1418.5], [392.0, 622.0], [391.0, 1146.0], [415.0, 678.3333333333334], [404.0, 1046.25], [406.0, 1137.0], [405.0, 610.0], [408.0, 372.0], [413.0, 263.0], [414.0, 258.6666666666667], [412.0, 1159.0], [403.0, 1136.0], [402.0, 662.0], [400.0, 1137.0], [407.0, 1282.5], [411.0, 702.0], [410.0, 1116.5], [409.0, 1107.0], [419.0, 666.0], [429.0, 643.0], [431.0, 654.5], [428.0, 797.0], [425.0, 646.0], [424.0, 656.0], [423.0, 1125.5], [422.0, 674.0], [421.0, 675.0], [418.0, 680.0], [417.0, 668.0], [416.0, 678.0], [447.0, 676.0], [438.0, 213.66666666666669], [437.0, 659.0], [436.0, 2200.0], [441.0, 334.5], [444.0, 994.3333333333334], [445.0, 596.6666666666666], [443.0, 673.0], [442.0, 677.0], [440.0, 657.0], [439.0, 658.0], [433.0, 654.0], [432.0, 654.0], [435.0, 660.0], [434.0, 653.0], [461.0, 875.0], [450.0, 319.8], [451.0, 319.25], [454.0, 301.0], [453.0, 725.0], [452.0, 686.0], [455.0, 907.0], [449.0, 909.0], [448.0, 677.0], [457.0, 484.0], [456.0, 705.0], [463.0, 632.5], [462.0, 719.0], [460.0, 724.0], [459.0, 702.0], [458.0, 1437.5], [477.0, 361.6], [465.0, 502.5], [464.0, 727.0], [471.0, 725.0], [468.0, 720.0], [466.0, 504.0], [474.0, 630.1666666666666], [476.0, 358.0], [467.0, 715.0], [478.0, 411.66666666666663], [479.0, 728.0], [475.0, 899.0], [473.0, 721.0], [472.0, 722.0], [492.0, 665.3333333333333], [482.0, 418.33333333333337], [483.0, 286.0], [486.0, 362.75], [485.0, 726.0], [484.0, 730.0], [487.0, 726.0], [481.0, 729.0], [480.0, 732.0], [491.0, 722.4], [490.0, 512.5], [495.0, 468.5], [494.0, 761.5], [489.0, 763.0], [488.0, 755.5], [510.0, 179.0], [496.0, 544.3333333333334], [498.0, 764.0], [497.0, 765.0], [503.0, 768.0], [502.0, 757.0], [501.0, 916.0], [500.0, 762.0], [499.0, 472.5], [511.0, 606.6666666666666], [509.0, 763.0], [508.0, 764.0], [507.0, 756.0], [506.0, 761.0], [505.0, 764.0], [504.0, 769.0], [537.0, 1088.25], [512.0, 737.0], [513.0, 768.0], [527.0, 1682.0], [525.0, 763.0], [524.0, 766.0], [522.0, 768.0], [521.0, 896.0], [520.0, 764.0], [514.0, 374.0], [531.0, 639.5], [534.0, 537.5], [533.0, 767.0], [532.0, 2090.0], [535.0, 1280.0], [536.0, 653.25], [519.0, 766.0], [518.0, 765.0], [517.0, 2339.0], [516.0, 1295.0], [515.0, 1548.5], [539.0, 1135.0], [538.0, 962.0], [541.0, 1322.2857142857142], [542.0, 1258.0], [543.0, 331.0], [528.0, 1002.0], [530.0, 767.0], [529.0, 1272.0], [540.0, 498.5], [546.0, 224.5], [545.0, 207.0], [547.0, 244.33333333333334], [569.0, 1630.3333333333333], [568.0, 2014.6666666666667], [571.0, 1251.0], [570.0, 1504.5], [553.0, 267.0], [556.0, 261.3333333333333], [558.0, 256.0], [565.0, 455.4], [567.0, 503.0], [566.0, 747.0], [572.0, 513.5], [574.0, 655.5714285714287], [573.0, 1748.0], [575.0, 764.3333333333333], [560.0, 1271.6785714285713], [563.0, 751.0], [562.0, 746.0], [577.0, 409.85714285714283], [576.0, 405.1666666666667], [582.0, 511.5], [581.0, 740.0], [580.0, 998.3333333333334], [583.0, 630.25], [586.0, 1090.3333333333333], [585.0, 1592.3333333333333], [584.0, 1237.0], [587.0, 745.0], [588.0, 503.28571428571433], [590.0, 991.5], [589.0, 1399.1428571428573], [591.0, 301.0], [593.0, 306.0], [592.0, 1292.2857142857142], [594.0, 747.5], [607.0, 1449.0], [606.0, 1558.2], [605.0, 735.5], [603.0, 1708.75], [600.0, 457.33333333333337], [601.0, 748.0], [602.0, 497.0], [595.0, 1265.8], [596.0, 982.4], [597.0, 925.75], [599.0, 2029.0], [598.0, 726.0], [633.0, 745.0], [637.0, 736.0], [622.0, 940.0], [621.0, 1556.857142857143], [620.0, 1285.0], [619.0, 1615.75], [618.0, 1359.0], [617.0, 1868.0], [616.0, 1586.0], [632.0, 1259.5], [615.0, 1605.0], [614.0, 1200.0], [613.0, 1756.6], [612.0, 1431.6], [611.0, 1553.1666666666665], [610.0, 1432.75], [609.0, 1697.0], [608.0, 1557.4375], [623.0, 1671.3333333333333], [626.0, 247.0], [625.0, 1395.5], [624.0, 1823.0], [630.0, 995.25], [627.0, 723.5], [639.0, 742.0], [638.0, 761.0], [636.0, 733.0], [635.0, 1269.5], [634.0, 1270.5], [669.0, 1698.375], [655.0, 414.0], [649.0, 519.5], [648.0, 769.0], [650.0, 788.0], [651.0, 318.0], [654.0, 320.0], [653.0, 780.0], [652.0, 785.0], [656.0, 548.0], [670.0, 298.0], [668.0, 1368.8], [666.0, 810.0], [665.0, 1134.6666666666667], [646.0, 761.0], [645.0, 1282.5], [644.0, 748.0], [642.0, 740.0], [641.0, 758.0], [640.0, 738.0], [671.0, 801.5], [657.0, 468.66666666666663], [658.0, 546.0], [659.0, 868.6], [660.0, 470.66666666666663], [662.0, 461.75], [663.0, 784.0], [661.0, 446.33333333333337], [699.0, 859.0], [703.0, 865.0], [693.0, 496.33333333333337], [694.0, 1403.5], [692.0, 581.0], [691.0, 582.0], [690.0, 832.0], [689.0, 838.0], [696.0, 497.0], [679.0, 823.0], [678.0, 833.0], [677.0, 825.0], [676.0, 813.5], [674.0, 818.0], [672.0, 828.0], [687.0, 836.0], [686.0, 829.0], [685.0, 831.0], [683.0, 825.5], [681.0, 837.0], [680.0, 830.0], [698.0, 847.0], [697.0, 846.0], [702.0, 860.0], [701.0, 860.0], [700.0, 1678.5], [732.0, 832.2105263157895], [729.0, 1175.3333333333335], [706.0, 598.0], [719.0, 1282.8], [705.0, 862.0], [704.0, 858.0], [718.0, 1399.0], [717.0, 1356.3333333333333], [716.0, 1411.75], [715.0, 1412.0], [714.0, 1417.8333333333335], [713.0, 1169.5], [712.0, 936.0], [727.0, 1087.2727272727273], [726.0, 1402.0], [725.0, 1376.0], [724.0, 1662.0], [723.0, 877.0], [722.0, 1380.5], [721.0, 1412.888888888889], [720.0, 887.0], [730.0, 1021.2857142857143], [734.0, 825.5], [733.0, 1014.4], [731.0, 1246.0], [728.0, 1100.0], [711.0, 871.0], [710.0, 1415.75], [709.0, 875.0], [708.0, 1143.0], [707.0, 862.0], [742.0, 1125.6666666666665], [762.0, 821.0], [737.0, 598.5], [739.0, 458.75], [738.0, 823.6363636363636], [741.0, 818.2], [740.0, 821.5], [743.0, 1255.6666666666667], [747.0, 670.1428571428571], [751.0, 800.0], [750.0, 795.0], [749.0, 797.0], [748.0, 799.0], [746.0, 574.0], [745.0, 797.0], [744.0, 1034.5], [763.0, 818.0], [752.0, 815.5], [754.0, 794.0], [753.0, 798.0], [757.0, 828.0], [755.0, 828.0], [761.0, 801.0], [760.0, 809.0], [759.0, 812.0], [758.0, 819.0], [796.0, 685.5], [799.0, 678.0], [785.0, 807.9090909090909], [784.0, 706.0], [787.0, 664.0], [786.0, 980.3333333333334], [789.0, 659.0], [788.0, 680.5], [798.0, 678.0], [797.0, 1012.3333333333334], [795.0, 684.5], [794.0, 708.0], [793.0, 748.5714285714286], [792.0, 823.875], [783.0, 731.6666666666666], [769.0, 769.0], [768.0, 900.2727272727273], [771.0, 865.6666666666666], [770.0, 864.0], [773.0, 827.5714285714286], [772.0, 881.9230769230769], [775.0, 810.6], [774.0, 1029.125], [782.0, 749.6000000000001], [781.0, 720.0], [780.0, 997.0], [779.0, 764.4285714285714], [778.0, 808.0], [777.0, 804.0833333333333], [776.0, 768.5], [791.0, 1205.0], [790.0, 1066.5], [824.0, 581.5], [828.0, 475.83333333333337], [831.0, 485.6666666666667], [819.0, 751.5], [817.0, 603.6666666666666], [821.0, 584.0], [820.0, 712.1666666666667], [830.0, 537.0555555555557], [829.0, 453.0], [827.0, 500.0], [826.0, 574.5], [825.0, 577.0], [815.0, 623.0], [801.0, 679.3333333333334], [803.0, 683.0], [802.0, 677.0], [805.0, 682.4444444444445], [804.0, 679.3333333333334], [807.0, 684.0], [806.0, 693.2499999999999], [814.0, 609.0], [813.0, 609.0], [812.0, 614.0], [811.0, 613.0], [810.0, 618.0], [809.0, 640.0], [808.0, 677.5454545454545], [823.0, 578.0], [822.0, 582.0], [857.0, 542.0], [833.0, 646.0], [832.0, 588.5], [837.0, 539.0], [836.0, 552.5], [835.0, 775.3333333333334], [834.0, 558.75], [838.0, 550.0], [856.0, 510.0], [839.0, 549.0], [858.0, 700.5], [859.0, 506.0], [861.0, 497.0], [860.0, 611.625], [863.0, 556.0], [848.0, 530.0], [862.0, 661.75], [842.0, 503.5], [841.0, 787.7142857142857], [840.0, 548.0], [844.0, 539.0], [843.0, 539.0], [845.0, 490.3333333333333], [847.0, 551.25], [846.0, 535.0], [849.0, 591.25], [851.0, 666.5555555555555], [850.0, 653.0], [853.0, 515.6], [852.0, 515.0], [854.0, 494.0], [855.0, 511.3333333333333], [888.0, 554.9999999999999], [884.0, 722.3333333333334], [873.0, 521.6], [872.0, 618.4], [874.0, 551.0], [877.0, 633.7142857142857], [875.0, 547.5], [879.0, 558.0], [864.0, 492.0], [866.0, 490.0], [865.0, 491.0], [869.0, 554.0], [867.0, 556.0], [871.0, 551.0], [870.0, 536.5], [878.0, 560.5], [889.0, 636.0], [881.0, 530.0], [880.0, 558.0], [887.0, 597.875], [886.0, 684.7857142857142], [885.0, 808.0], [883.0, 559.6666666666666], [882.0, 553.5], [1.0, 6.0]], "isOverall": false, "label": "Requisição HTTP", "isController": false}, {"data": [[513.2715000000005, 811.4160000000003]], "isOverall": false, "label": "Requisição HTTP-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 889.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 7500.0, "minX": 1.63191684E12, "maxY": 7700.0, "series": [{"data": [[1.63191684E12, 7500.0]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.63191684E12, 7700.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63191684E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 811.4160000000003, "minX": 1.63191684E12, "maxY": 811.4160000000003, "series": [{"data": [[1.63191684E12, 811.4160000000003]], "isOverall": false, "label": "Requisição HTTP", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63191684E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 810.8935000000004, "minX": 1.63191684E12, "maxY": 810.8935000000004, "series": [{"data": [[1.63191684E12, 810.8935000000004]], "isOverall": false, "label": "Requisição HTTP", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63191684E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 71.39450000000002, "minX": 1.63191684E12, "maxY": 71.39450000000002, "series": [{"data": [[1.63191684E12, 71.39450000000002]], "isOverall": false, "label": "Requisição HTTP", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63191684E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 6.0, "minX": 1.63191684E12, "maxY": 3028.0, "series": [{"data": [[1.63191684E12, 3028.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.63191684E12, 1741.9]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.63191684E12, 2606.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.63191684E12, 2035.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.63191684E12, 6.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.63191684E12, 700.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63191684E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 28.0, "minX": 13.0, "maxY": 791.0, "series": [{"data": [[656.0, 791.0], [403.0, 276.0], [13.0, 28.0], [869.0, 779.0], [59.0, 35.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 869.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 28.0, "minX": 13.0, "maxY": 791.0, "series": [{"data": [[656.0, 791.0], [403.0, 276.0], [13.0, 28.0], [869.0, 778.0], [59.0, 35.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 869.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 33.333333333333336, "minX": 1.63191684E12, "maxY": 33.333333333333336, "series": [{"data": [[1.63191684E12, 33.333333333333336]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63191684E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 33.333333333333336, "minX": 1.63191684E12, "maxY": 33.333333333333336, "series": [{"data": [[1.63191684E12, 33.333333333333336]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63191684E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 33.333333333333336, "minX": 1.63191684E12, "maxY": 33.333333333333336, "series": [{"data": [[1.63191684E12, 33.333333333333336]], "isOverall": false, "label": "Requisição HTTP-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63191684E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 33.333333333333336, "minX": 1.63191684E12, "maxY": 33.333333333333336, "series": [{"data": [[1.63191684E12, 33.333333333333336]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63191684E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

